stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY: https://index.docker.io/v1/
  CI_REGISTRY_USER: grejs420
  CI_REGISTRY_PASSWORD: rovgard1!
  CI_REGISTRY_IMAGE_USER_SERVICE: docker.io/grejs420/api-gateway
  CI_REGISTRY_IMAGE_USER_SERVICE: docker.io/grejs420/user-service
  CI_REGISTRY_IMAGE_CHAT_SERVICE: docker.io/grejs420/chat-service
  CI_REGISTRY_IMAGE_MESSAGE_SERVICE: docker.io/grejs420/message-service
  CI_REGISTRY_IMAGE_AUTH_SERVICE: docker.io/grejs420/auth-service
  CI_REGISTRY_IMAGE_FRONTEND: docker.io/grejs420/frontend
  CI_REGISTRY_IMAGE_GRAPHQL: docker.io/grejs420/graphql
  KUBE_URL: https://swwao.courses.orbit.au.dk/grp-6-kube
  KUBE_TOKEN: $KUBE_TOKEN
  KUBE_NAMESPACE: default

# Shared login script
.docker_login: &docker_login
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Shared build job template
.build_template: &build_template
  image: docker:latest
  services:
    - docker:dind
  script:
    - *docker_login
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $SERVICE_PATH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  only:
    - main

# Shared test job template
.test_template: &test_template
  image: docker:latest
  services:
    - docker:dind
  script:
    - *docker_login
    - docker rm -f $SERVICE_NAME || true
    - docker run -d --name $SERVICE_NAME -p $PORT:$PORT $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - sleep 10
    - docker ps | grep $SERVICE_NAME || docker logs $SERVICE_NAME
  only:
    - main

# Shared deploy job template
.deploy_template: &deploy_template
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - kubectl config set-cluster default-cluster --server=$KUBE_URL
    - kubectl config set-context default-context --cluster=default-cluster --namespace=$KUBE_NAMESPACE --user=default-user
    - kubectl config set-credentials default-user --token=$KUBE_TOKEN
    - kubectl config use-context default-context
    - kubectl apply -f $K8S_PATH$K8S_NAME/k8s/deployment.yml
    - kubectl apply -f $K8S_PATH$K8S_NAME/k8s/service.yml
  only:
    - main
  needs:
    - deploy_generel

##Build Jobs
build_api_gateway:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_API_GATEWAY
    SERVICE_PATH: ./backend/api-gateway
  <<: *build_template

build_user_service:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_USER_SERVICE
    SERVICE_PATH: ./backend/user-service
  <<: *build_template

build_chat_service:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_CHAT_SERVICE
    SERVICE_PATH: ./backend/chat-service
  <<: *build_template

build_message_service:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_MESSAGE_SERVICE
    SERVICE_PATH: ./backend/message-service
  <<: *build_template

build_auth_service:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_AUTH_SERVICE
    SERVICE_PATH: ./backend/auth-service
  <<: *build_template

build_graphql:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_GRAPHQL
    SERVICE_PATH: ./backend/graphql
  <<: *build_template

build_frontend:
  stage: build
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_FRONTEND
    SERVICE_PATH: ./frontend
  <<: *build_template

# Test Jobs
test_api_gateway:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_API_GATEWAY
    SERVICE_NAME: api-gateway
    PORT: 3000
  <<: *test_template

test_user_service:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_USER_SERVICE
    SERVICE_NAME: user-service
    PORT: 3001
  <<: *test_template

test_chat_service:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_CHAT_SERVICE
    SERVICE_NAME: chat-service
    PORT: 3002
  <<: *test_template

test_message_service:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_MESSAGE_SERVICE
    SERVICE_NAME: message-service
    PORT: 3003
  <<: *test_template

test_auth_service:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_AUTH_SERVICE
    SERVICE_NAME: auth-service
    PORT: 3004
  <<: *test_template

test_graphql:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_GRAPHQL
    SERVICE_NAME: graphql
    PORT: 4000
  <<: *test_template

test_frontend:
  stage: test
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_FRONTEND
    SERVICE_NAME: frontend
    PORT: 80
  <<: *test_template


# Deploy Jobs
deploy_generel:
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - kubectl config set-cluster default-cluster --server=$KUBE_URL
    - kubectl config set-context default-context --cluster=default-cluster --namespace=$KUBE_NAMESPACE --user=default-user
    - kubectl config set-credentials default-user --token=$KUBE_TOKEN
    - kubectl config use-context default-context
    - kubectl apply -f kubernetes/k8s/ingress.yml
    - kubectl apply -f kubernetes/k8s/namespace.yml
    - kubectl apply -f kubernetes/k8s/secrets.yml
    - kubectl apply -f kubernetes/k8s/configmap.yml
  only:
    - main

deploy_mongo:
  variables:
    K8S_NAME: mongo
    K8S_PATH: database/
  <<: *deploy_template

deploy_rabbit_mq:
  variables:
    K8S_NAME: rabbit-mq
    K8S_PATH: backend/
  <<: *deploy_template

deploy_api_gateway:
  variables:
    K8S_NAME: api-gateway
    K8S_PATH: backend/
  <<: *deploy_template

deploy_user_service:
  variables:
    K8S_NAME: user-service
    K8S_PATH: backend/
  <<: *deploy_template

deploy_chat_service:
  variables:
    K8S_NAME: chat-service
    K8S_PATH: backend/
  <<: *deploy_template

deploy_message_service:
  variables:
    K8S_NAME: message-service
    K8S_PATH: backend/
  <<: *deploy_template

deploy_auth_service:
  variables:
    K8S_NAME: auth-service
    K8S_PATH: backend/
  <<: *deploy_template

deploy_graphql:
  variables:
    K8S_NAME: graphql
    K8S_PATH: backend/
  <<: *deploy_template

deploy_frontend:
  variables:
    K8S_NAME: frontend
    K8S_PATH: 
  <<: *deploy_template
