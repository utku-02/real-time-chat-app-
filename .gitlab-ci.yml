stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY: https://index.docker.io/v1/
  CI_REGISTRY_USER: grejs420
  CI_REGISTRY_PASSWORD: rovgard1!
  KUBE_URL: https://swwao.courses.orbit.au.dk/grp-6-kube
  KUBE_TOKEN: $KUBE_TOKEN
  KUBE_NAMESPACE: default

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - chmod +x build_and_push.sh 
  script:
    - ./build_and_push.sh
  only:
    - main


test_user_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker rm -f user-service || true
    - docker run -d --name user-service -p 3000:3000 grejs420/user-service:latest
    - sleep 10 # Wait for the container to be fully up and running
    - docker ps | grep user-service
  only:
    - main

test_chat_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker rm -f chat-service || true
    - docker run -d --name chat-service -p 3001:3001 grejs420/chat-service:latest
    - sleep 10 # Wait for the container to be fully up and running
    - docker ps | grep chat-service
  only:
    - main

test_message_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker rm -f message-service || true
    - docker run -d --name message-service -p 3002:3002 grejs420/message-service:latest
    - sleep 10 # Wait for the container to be fully up and running
    - docker ps | grep message-service
  only:
    - main

test_auth_service:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker rm -f auth-service || true
    - docker run -d --name auth-service -p 3003:3003 grejs420/auth-service:latest
    - sleep 10 # Wait for the container to be fully up and running
    - docker ps | grep auth-service
  only:
    - main

deploy:
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - kubectl config set-cluster default-cluster --server=$KUBE_URL
    - kubectl config set-context default-context --cluster=default-cluster --namespace=$KUBE_NAMESPACE --user=default-user
    - kubectl config set-credentials default-user --token=$KUBE_TOKEN
    - kubectl config use-context default-context
    - kubectl apply -f k8s/user-service-deployment.yml
    - kubectl apply -f k8s/chat-service-deployment.yml
    - kubectl apply -f k8s/message-service-deployment.yml
    - kubectl apply -f k8s/auth-service-deployment.yml
    # Uncomment and update these sections when the API gateway is implemented
    # - kubectl apply -f k8s/api-gateway-deployment.yml
  only:
    - main
